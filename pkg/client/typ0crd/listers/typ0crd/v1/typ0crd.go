/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "operator-v1/pkg/apis/typ0crd/v1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// Typ0crdLister helps list Typ0crds.
type Typ0crdLister interface {
	// List lists all Typ0crds in the indexer.
	List(selector labels.Selector) (ret []*v1.Typ0crd, err error)
	// Typ0crds returns an object that can list and get Typ0crds.
	Typ0crds(namespace string) Typ0crdNamespaceLister
	Typ0crdListerExpansion
}

// typ0crdLister implements the Typ0crdLister interface.
type typ0crdLister struct {
	indexer cache.Indexer
}

// NewTyp0crdLister returns a new Typ0crdLister.
func NewTyp0crdLister(indexer cache.Indexer) Typ0crdLister {
	return &typ0crdLister{indexer: indexer}
}

// List lists all Typ0crds in the indexer.
func (s *typ0crdLister) List(selector labels.Selector) (ret []*v1.Typ0crd, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Typ0crd))
	})
	return ret, err
}

// Typ0crds returns an object that can list and get Typ0crds.
func (s *typ0crdLister) Typ0crds(namespace string) Typ0crdNamespaceLister {
	return typ0crdNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// Typ0crdNamespaceLister helps list and get Typ0crds.
type Typ0crdNamespaceLister interface {
	// List lists all Typ0crds in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.Typ0crd, err error)
	// Get retrieves the Typ0crd from the indexer for a given namespace and name.
	Get(name string) (*v1.Typ0crd, error)
	Typ0crdNamespaceListerExpansion
}

// typ0crdNamespaceLister implements the Typ0crdNamespaceLister
// interface.
type typ0crdNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Typ0crds in the indexer for a given namespace.
func (s typ0crdNamespaceLister) List(selector labels.Selector) (ret []*v1.Typ0crd, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Typ0crd))
	})
	return ret, err
}

// Get retrieves the Typ0crd from the indexer for a given namespace and name.
func (s typ0crdNamespaceLister) Get(name string) (*v1.Typ0crd, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("typ0crd"), name)
	}
	return obj.(*v1.Typ0crd), nil
}
