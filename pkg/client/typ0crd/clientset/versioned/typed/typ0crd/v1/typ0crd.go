/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	v1 "operator-v1/pkg/apis/typ0crd/v1"
	scheme "operator-v1/pkg/client/typ0crd/clientset/versioned/scheme"
	"time"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// Typ0crdsGetter has a method to return a Typ0crdInterface.
// A group's client should implement this interface.
type Typ0crdsGetter interface {
	Typ0crds(namespace string) Typ0crdInterface
}

// Typ0crdInterface has methods to work with Typ0crd resources.
type Typ0crdInterface interface {
	Create(*v1.Typ0crd) (*v1.Typ0crd, error)
	Update(*v1.Typ0crd) (*v1.Typ0crd, error)
	UpdateStatus(*v1.Typ0crd) (*v1.Typ0crd, error)
	Delete(name string, options *metav1.DeleteOptions) error
	DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error
	Get(name string, options metav1.GetOptions) (*v1.Typ0crd, error)
	List(opts metav1.ListOptions) (*v1.Typ0crdList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.Typ0crd, err error)
	Typ0crdExpansion
}

// typ0crds implements Typ0crdInterface
type typ0crds struct {
	client rest.Interface
	ns     string
}

// newTyp0crds returns a Typ0crds
func newTyp0crds(c *CrdV1Client, namespace string) *typ0crds {
	return &typ0crds{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the typ0crd, and returns the corresponding typ0crd object, and an error if there is any.
func (c *typ0crds) Get(name string, options metav1.GetOptions) (result *v1.Typ0crd, err error) {
	result = &v1.Typ0crd{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("typ0crds").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of Typ0crds that match those selectors.
func (c *typ0crds) List(opts metav1.ListOptions) (result *v1.Typ0crdList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1.Typ0crdList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("typ0crds").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested typ0crds.
func (c *typ0crds) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("typ0crds").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a typ0crd and creates it.  Returns the server's representation of the typ0crd, and an error, if there is any.
func (c *typ0crds) Create(typ0crd *v1.Typ0crd) (result *v1.Typ0crd, err error) {
	result = &v1.Typ0crd{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("typ0crds").
		Body(typ0crd).
		Do().
		Into(result)
	return
}

// Update takes the representation of a typ0crd and updates it. Returns the server's representation of the typ0crd, and an error, if there is any.
func (c *typ0crds) Update(typ0crd *v1.Typ0crd) (result *v1.Typ0crd, err error) {
	result = &v1.Typ0crd{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("typ0crds").
		Name(typ0crd.Name).
		Body(typ0crd).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *typ0crds) UpdateStatus(typ0crd *v1.Typ0crd) (result *v1.Typ0crd, err error) {
	result = &v1.Typ0crd{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("typ0crds").
		Name(typ0crd.Name).
		SubResource("status").
		Body(typ0crd).
		Do().
		Into(result)
	return
}

// Delete takes name of the typ0crd and deletes it. Returns an error if one occurs.
func (c *typ0crds) Delete(name string, options *metav1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("typ0crds").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *typ0crds) DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("typ0crds").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched typ0crd.
func (c *typ0crds) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.Typ0crd, err error) {
	result = &v1.Typ0crd{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("typ0crds").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
